/**
 * AbaqusJobRunner 統合テスト
 * 
 * 実際のジョブ実行フローをテストする
 * MockAbaqusJobRunnerを使用してAbaqus環境なしでテスト可能
 */

import { describe, test, expect, beforeEach, afterEach } from 'bun:test';
import { AbaqusJobRunnerFactory } from '../abaqus-job-runner-factory.server';
import { MockAbaqusJobRunner } from '../mock-abaqus-job-runner.server';
import type { PersistedJob, PersistedNode } from '../../../core/types/database';
import { promises as fs } from 'fs';
import path from 'path';

// テストデータ（PersistedTypeを使用してIDを必須に）
const mockJob: PersistedJob = {
  id: 1, // 必須
  name: 'Test Abaqus Job',
  status: 'waiting',
  node_id: 1,
  file_id: 1,
  user_id: 1,
  cpu_cores: 4,
  priority: 'normal',
  start_time: null,
  end_time: null,
  error_message: null,
  output_file_path: null,
  created_at: '2024-01-01T00:00:00Z', // 必須
  updated_at: '2024-01-01T00:00:00Z'  // 必須
};

const mockNode: PersistedNode = {
  id: 1, // 必須
  name: 'Test Node',
  hostname: 'test-node.local',
  ssh_port: 22,
  license_token_limit: 10,
  cpu_cores_limit: 16,
  status: 'available',
  is_active: true,
  created_at: '2024-01-01T00:00:00Z', // 必須
  updated_at: '2024-01-01T00:00:00Z'  // 必須
};

// テスト用ジョブファクトリー関数
function createMockJob(overrides: Partial<PersistedJob> = {}): PersistedJob {
  return {
    ...mockJob,
    ...overrides,
    id: overrides.id ?? mockJob.id, // IDは必須
    created_at: overrides.created_at ?? mockJob.created_at, // 必須
    updated_at: overrides.updated_at ?? mockJob.updated_at   // 必須
  };
}

describe('AbaqusJobRunner Integration Tests', () => {
  beforeEach(() => {
    // テスト前にファクトリーをリセット
    AbaqusJobRunnerFactory.resetInstance();
  });

  afterEach(async () => {
    // テスト後のクリーンアップ
    try {
      const mockResultsDir = path.join(process.cwd(), 'mock-results');
      await fs.rm(mockResultsDir, { recursive: true, force: true });
    } catch {
      // ディレクトリが存在しない場合は無視
    }
  });

  test('正常なジョブ実行フロー', async () => {
    // MockAbaqusJobRunnerを使用
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 100,
        executionDurationMs: 200,
        downloadDurationMs: 50
      }
    });

    expect(runner).toBeInstanceOf(MockAbaqusJobRunner);

    // ジョブ実行
    const result = await runner.executeJob(mockJob, mockNode);

    // 結果の検証
    expect(result.success).toBe(true);
    expect(result.jobId).toBe(mockJob.id);
    expect(result.executionTime).toBeGreaterThan(300); // 最低でも合計実行時間
    expect(result.outputFiles).toHaveLength(1);
    expect(result.remotePath).toMatch(/\/tmp\/abaqus-jobs\/mock-job-1-\d+/);
    expect(result.localResultPath).toMatch(/mock-results\/job-1-\d+/);
  });

  test('アップロードエラーのハンドリング', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 50,
        simulateErrors: {
          upload: true
        }
      }
    });

    const result = await runner.executeJob(mockJob, mockNode);

    // エラー結果の検証
    expect(result.success).toBe(false);
    expect(result.errorMessage).toContain('[MOCK] File upload failed');
    expect(result.outputFiles).toHaveLength(0);
  });

  test('Abaqus実行エラーのハンドリング', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 50,
        executionDurationMs: 100,
        simulateErrors: {
          execution: true
        }
      }
    });

    const result = await runner.executeJob(mockJob, mockNode);

    // エラー結果の検証
    expect(result.success).toBe(false);
    expect(result.errorMessage).toContain('[MOCK] Simulated Abaqus execution error');
  });

  test('ダウンロードエラーのハンドリング', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 50,
        executionDurationMs: 100,
        downloadDurationMs: 50,
        simulateErrors: {
          download: true
        }
      }
    });

    const result = await runner.executeJob(mockJob, mockNode);

    // 成功だがダウンロード失敗の警告
    expect(result.success).toBe(true); // ジョブ自体は完了
    expect(result.outputFiles).toHaveLength(0); // 結果ファイルなし
    expect(result.localResultPath).toBeUndefined();
  });

  test('並行ジョブ実行（シリアル処理確認）', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 100,
        executionDurationMs: 100,
        downloadDurationMs: 100
      }
    });

    const job1 = createMockJob({ id: 1, name: 'Job 1' });
    const job2 = createMockJob({ id: 2, name: 'Job 2' });
    const job3 = createMockJob({ id: 3, name: 'Job 3' });

    // 3つのジョブを同時に開始
    const startTime = Date.now();
    const [result1, result2, result3] = await Promise.all([
      runner.executeJob(job1, mockNode),
      runner.executeJob(job2, mockNode),
      runner.executeJob(job3, mockNode)
    ]);
    const totalTime = Date.now() - startTime;

    // 全ジョブが成功することを確認
    expect(result1.success).toBe(true);
    expect(result2.success).toBe(true);
    expect(result3.success).toBe(true);

    // シリアル処理により、合計時間が長くなることを確認
    // 完全に直列だと900ms、並列だと300ms程度なので、中間値を期待
    expect(totalTime).toBeGreaterThan(450);
  });

  test('エラー率設定によるランダムエラー', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: {
        uploadDurationMs: 10,
        executionDurationMs: 10,
        downloadDurationMs: 10,
        errorRate: 1.0 // 100%エラー
      }
    });

    const result = await runner.executeJob(mockJob, mockNode);

    // 高確率でエラーになることを確認
    expect(result.success).toBe(false);
    expect(result.errorMessage).toContain('[MOCK]');
  });

  test('Factoryの環境判定', () => {
    // 開発環境での自動判定テスト
    process.env.NODE_ENV = 'development';
    delete process.env.USE_MOCK_ABAQUS;

    const info = AbaqusJobRunnerFactory.getInfo();
    
    expect(info.usingMock).toBe(true);
    expect(info.environment).toBe('development');
    expect(info.reason).toContain('Development environment');
  });

  test('環境変数による強制設定', () => {
    process.env.USE_MOCK_ABAQUS = 'false';
    process.env.NODE_ENV = 'development';

    const info = AbaqusJobRunnerFactory.getInfo();
    
    expect(info.usingMock).toBe(false);
    expect(info.reason).toContain('Environment variable USE_MOCK_ABAQUS=false');

    // クリーンアップ
    delete process.env.USE_MOCK_ABAQUS;
  });

  test('無効なJob IDでのエラーハンドリング', async () => {
    const runner = AbaqusJobRunnerFactory.getInstance({
      forceMock: true,
      mockConfig: { uploadDurationMs: 10 }
    });

    // Persisted型なのでIDなしのジョブは型レベルで作成不可能
    // 代わりに、IDが0の無効なジョブでテスト
    const jobWithZeroId = createMockJob({ id: 0 });

    const result = await runner.executeJob(jobWithZeroId, mockNode);

    expect(result.success).toBe(false);
    expect(result.errorMessage).toContain('Valid Job ID is required');
    expect(result.jobId).toBe(0);
  });
});